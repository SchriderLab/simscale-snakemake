import pandas as pd
from glob import glob
import numpy as np
from functools import lru_cache
import os 

configfile: "./config/config.yml"

output_dir = config["output_dir"]
# remove last slash if it exists
if output_dir[-1] == "/":
    output_dir = output_dir[:-1]

src_data_dir = config["src_data_dir"]
# remove last slash if it exists
if src_data_dir[-1] == "/":
    src_data_dir = src_data_dir[:-1]

# Get the mutation names
if 'mutation_labels' in config:
    mutation_names = config['mutation_labels']
else:
    mutation_names = {x : x for x in get_sim_muts()}

if 'xlim' in config:
    xlim = config['xlim']
else:
    xlim = {}

# expensive I/O function, cache it, but not too much
@lru_cache(maxsize=10)
def get_sim_output_files(Q):
    samples, = glob_wildcards(f"{src_data_dir}/Q{Q}/sample_{{sample}}.vcf")
    # sort the samples for reproducibility
    samples = sorted(samples, key=lambda x: int(x))

    fixation_files = [f"{src_data_dir}/Q{Q}/fixation_{sample}.csv" for sample in samples]
    fixation_prob_files = [f"{src_data_dir}/Q{Q}/fixation_prob_{sample}.csv" for sample in samples]
    sample_files = [f"{src_data_dir}/Q{Q}/sample_{sample}.vcf" for sample in samples]

    return [fixation_files, fixation_prob_files, sample_files]

# Only need to cache once per simulation
@lru_cache(maxsize=1)
def get_qs():
    # Find all directories in the src_data_dir
    directories = os.listdir(src_data_dir)
    # The directories are names Q[q_value] so we need to extract the q_value
    qs = [int(dir[1:]) for dir in directories]
    # sort the qs for reproducibility
    qs = sorted(qs)
    return qs


def get_expected_output_batches():
    qs = get_qs()
    batches = [get_num_batches(Q) for Q in qs]


def get_batch_files(wildcards):
    Q = int(wildcards.Q)
    batch = int(wildcards.batch)
    sim_files = get_sim_output_files(Q)
    batch = int(wildcards.batch)
    batch_size = config['batch_size']
    start = batch * batch_size
    end = start + batch_size
    batch_files = list(np.concatenate([sim_files[i][start:end] for i in range(len(sim_files))]))
    return batch_files


def get_num_batches(Q):
    _, fixation_prob_files, _ = get_sim_output_files(Q=Q)
    num_batches = np.ceil(len(fixation_prob_files) / config['batch_size'])
    return int(num_batches)

@lru_cache(maxsize=1)
def get_sim_muts():
    _, fixation_prob_files, _ = get_sim_output_files(get_qs()[0])
    # Open up a random fixation_prob file and get the mutations
    fixation_prob_file = fixation_prob_files[0]
    df = pd.read_csv(fixation_prob_file)
    # the mutations are the column names
    mutations = df.columns.values.tolist()
    return mutations

@lru_cache(maxsize=1)
def get_fixation_binwidth():
    bin_widths = []
    lowest_q = get_qs()[0]
    fixation_files, _, _ = get_sim_output_files(lowest_q)
    # Open up a random fixation file and get the mutations
    fixation_file = fixation_files[0]
    df = pd.read_csv(fixation_file)
    muts = get_sim_muts()
    df = pd.read_csv(Path(fixation_file))
    for mut in muts:
        df_mut = df[df['mutation_id'] == mut]
        bin_width = 1
        for fixation_file in fixation_files:
            df = pd.read_csv(Path(fixation_file))
            df_mut = df[df['mutation_id'] == mut]
            if len(df_mut) > 0:
                fixation_times = ((df_mut['fix_gen'] - df_mut['origin_gen'])*lowest_q).to_numpy()
                bin_width = int(np.max(fixation_times) / 20)
                break
        bin_widths.append(bin_width)
    return bin_widths

onstart:
    shell("mkdir -p {output_dir}/graphs/sampling {output_dir}/summary_stats/sampling")

onsuccess:
    shell("rm -rf {output_dir}/batch_tmp_fulldata")

rule all:
    input:
        f"{output_dir}/graphs/sfs.svg",
        f"{output_dir}/summary_stats/sfs.csv",
        f"{output_dir}/graphs/fixation.svg",
        f"{output_dir}/summary_stats/fixation.csv",
        f"{output_dir}/graphs/ld.svg",
        f"{output_dir}/summary_stats/ld.csv",
        f"{output_dir}/graphs/fixationprobs.svg",
        f"{output_dir}/summary_stats/fixationprobs.csv",
        f"{output_dir}/graphs/rf_accuracy.svg",
        f"{output_dir}/summary_stats/rf_accuracy.csv",
        f"{output_dir}/graphs/lr_accuracy.svg",
        f"{output_dir}/summary_stats/lr_accuracy.csv",
        f"{output_dir}/graphs/kl_divergence_fixation.svg",
        f"{output_dir}/graphs/sampling/kl_divergence_fixation_100.svg",
        f"{output_dir}/graphs/sampling/kl_divergence_fixation_10.svg",
        f"{output_dir}/summary_stats/kl_divergence_fixation.csv",
        f"{output_dir}/summary_stats/sampling/kl_divergence_fixation_100.csv",
        f"{output_dir}/summary_stats/sampling/kl_divergence_fixation_10.csv",
        f"{output_dir}/graphs/kl_divergence_sfs.svg",
        f"{output_dir}/graphs/sampling/kl_divergence_sfs_100.svg",
        f"{output_dir}/graphs/sampling/kl_divergence_sfs_10.svg",
        f"{output_dir}/summary_stats/kl_divergence_sfs.csv",
        f"{output_dir}/summary_stats/sampling/kl_divergence_sfs_100.csv",
        f"{output_dir}/summary_stats/sampling/kl_divergence_sfs_10.csv",
        f"{output_dir}/graphs/average_rmse_ld.svg",
        f"{output_dir}/graphs/sampling/average_rmse_ld_100.svg",
        f"{output_dir}/graphs/sampling/average_rmse_ld_10.svg",
        f"{output_dir}/summary_stats/average_rmse_ld.csv",
        f"{output_dir}/summary_stats/sampling/average_rmse_ld_100.csv",
        f"{output_dir}/summary_stats/sampling/average_rmse_ld_10.csv",
        f"{output_dir}/graphs/mean_percent_error_fixation.svg",
        # f"{output_dir}/graphs/sampling/mean_percent_error_fixation_500.svg",
        f"{output_dir}/graphs/sampling/mean_percent_error_fixation_100.svg",
        # f"{output_dir}/graphs/sampling/mean_percent_error_fixation_50.svg",
        f"{output_dir}/graphs/sampling/mean_percent_error_fixation_10.svg",
        f"{output_dir}/summary_stats/mean_percent_error_fixation.csv",
        # f"{output_dir}/summary_stats/sampling/mean_percent_error_fixation_500.csv",
        f"{output_dir}/summary_stats/sampling/mean_percent_error_fixation_100.csv",
        # f"{output_dir}/summary_stats/sampling/mean_percent_error_fixation_50.csv",
        f"{output_dir}/summary_stats/sampling/mean_percent_error_fixation_10.csv",
        f"{output_dir}/graphs/mean_percent_error_sfs.svg",
        # f"{output_dir}/graphs/sampling/mean_percent_error_sfs_500.svg",
        f"{output_dir}/graphs/sampling/mean_percent_error_sfs_100.svg",
        # f"{output_dir}/graphs/sampling/mean_percent_error_sfs_50.svg",
        f"{output_dir}/graphs/sampling/mean_percent_error_sfs_10.svg",
        f"{output_dir}/summary_stats/mean_percent_error_sfs.csv",
        # f"{output_dir}/summary_stats/sampling/mean_percent_error_sfs_500.csv",
        f"{output_dir}/summary_stats/sampling/mean_percent_error_sfs_100.csv",
        # f"{output_dir}/summary_stats/sampling/mean_percent_error_sfs_50.csv",
        f"{output_dir}/summary_stats/sampling/mean_percent_error_sfs_10.csv",
        f"{output_dir}/graphs/mean_percent_error_ld.svg",
        # f"{output_dir}/graphs/sampling/mean_percent_error_ld_500.svg",
        f"{output_dir}/graphs/sampling/mean_percent_error_ld_100.svg",
        # f"{output_dir}/graphs/sampling/mean_percent_error_ld_50.svg",
        f"{output_dir}/graphs/sampling/mean_percent_error_ld_10.svg",
        f"{output_dir}/summary_stats/mean_percent_error_ld.csv",
        # f"{output_dir}/summary_stats/sampling/mean_percent_error_ld_500.csv",
        f"{output_dir}/summary_stats/sampling/mean_percent_error_ld_100.csv",
        # f"{output_dir}/summary_stats/sampling/mean_percent_error_ld_50.csv",
        f"{output_dir}/summary_stats/sampling/mean_percent_error_ld_10.csv",
        f"{output_dir}/graphs/mean_percent_error_fixationprobs.svg",
        # f"{output_dir}/graphs/sampling/mean_percent_error_fixationprobs_500.svg",
        f"{output_dir}/graphs/sampling/mean_percent_error_fixationprobs_100.svg",
        # f"{output_dir}/graphs/sampling/mean_percent_error_fixationprobs_50.svg",
        f"{output_dir}/graphs/sampling/mean_percent_error_fixationprobs_10.svg",
        f"{output_dir}/summary_stats/mean_percent_error_fixationprobs.csv",
        # f"{output_dir}/summary_stats/sampling/mean_percent_error_fixationprobs_500.csv",
        f"{output_dir}/summary_stats/sampling/mean_percent_error_fixationprobs_100.csv",
        # f"{output_dir}/summary_stats/sampling/mean_percent_error_fixationprobs_50.csv",
        f"{output_dir}/summary_stats/sampling/mean_percent_error_fixationprobs_10.csv",
        f"{output_dir}/graphs/median_percent_error_fixation.svg",
        f"{output_dir}/summary_stats/median_percent_error_fixation.csv",
        f"{output_dir}/graphs/median_percent_error_sfs.svg",
        f"{output_dir}/summary_stats/median_percent_error_sfs.csv",
        f"{output_dir}/graphs/median_percent_error_ld.svg",
        f"{output_dir}/summary_stats/median_percent_error_ld.csv",
    
rule graph_sfs:
    input:
        f"{output_dir}/full_data.csv"
    output:
        f"{output_dir}/graphs/sfs.svg",
        f"{output_dir}/summary_stats/sfs.csv"
    conda:
        config["conda_env"]
    group:
        "graphs"
    params:
        muts = get_sim_muts(),
        mut_labels = [mutation_names[mut] for mut in get_sim_muts()],
        xlim = xlim.get('sfs', 0)
    shell:
        ("""
        python scripts/create_summary_plots.py --input {input} --output {output_dir} --type sfs --muts {params.muts} --mut_labels {params.mut_labels} --xlim {params.xlim}
        """)

rule graph_fixation:
    input:
        f"{output_dir}/full_data.csv"
    output:
        f"{output_dir}/graphs/fixation.svg",
        f"{output_dir}/summary_stats/fixation.csv"
    conda:
        config["conda_env"]
    group:
        "graphs"
    params:
        muts = get_sim_muts(),
        mut_labels = [mutation_names[mut] for mut in get_sim_muts()],
        xlim = xlim.get('fixation', 0)
    shell:
        ("""
        python scripts/create_summary_plots.py --input {input} --output {output_dir} --type fixation --muts {params.muts} --mut_labels {params.mut_labels} --xlim {params.xlim}
        """)

rule graph_ld:
    input:
        f"{output_dir}/full_data.csv"
    output:
        f"{output_dir}/graphs/ld.svg",
        f"{output_dir}/summary_stats/ld.csv"
    conda:
        config["conda_env"]
    group:
        "graphs"
    params:
        muts = get_sim_muts(),
        mut_labels = [mutation_names[mut] for mut in get_sim_muts()],
        xlim = xlim.get('ld', 0)
    shell:
        ("""
        python scripts/create_summary_plots.py --input {input} --output {output_dir} --type ld --muts {params.muts} --mut_labels {params.mut_labels} --xlim {params.xlim}
        """)

rule graph_fixationprobs:
    input:
        f"{output_dir}/full_data.csv"
    output:
        f"{output_dir}/graphs/fixationprobs.svg",
        f"{output_dir}/summary_stats/fixationprobs.csv"
    conda:
        config["conda_env"]
    group:
        "graphs"
    params:
        muts = get_sim_muts(),
        mut_labels = [mutation_names[mut] for mut in get_sim_muts()]
    shell:
        ("""
        python scripts/create_summary_plots.py --input {input} --output {output_dir} --muts {params.muts} --mut_labels {params.mut_labels} --type fixationprobs
        """)


rule graph_rf:
    input:
        f"{output_dir}/full_data.csv"
    output:
        f"{output_dir}/graphs/rf_accuracy.svg",
        f"{output_dir}/summary_stats/rf_accuracy.csv"
    conda:
        config["conda_env"]
    group:
        "graphs"
    shell:
        ("""
        python scripts/create_ml_plots.py --input {input} --output {output_dir} --model rf 
        """)
    
rule graph_lr:
    input:
        f"{output_dir}/full_data.csv"
    output:
        f"{output_dir}/graphs/lr_accuracy.svg",
        f"{output_dir}/summary_stats/lr_accuracy.csv"
    conda:
        config["conda_env"]
    group:
        "graphs"
    shell:
        ("""
        python scripts/create_ml_plots.py --input {input} --output {output_dir} --model lr 
        """)

rule kl_divergence_fixation:
    input:
        f"{output_dir}/full_data.csv"
    output:
        f"{output_dir}/graphs/kl_divergence_fixation.svg",
        f"{output_dir}/summary_stats/kl_divergence_fixation.csv"
    conda:
        config["conda_env"]
    params:
        muts = get_sim_muts(),
        mut_labels = [mutation_names[mut] for mut in get_sim_muts()]
    group:
        "stats"
    shell:
        ("""
        python scripts/create_divergence_plots.py --input {input} --output {output_dir} --type kl --muts {params.muts} --mut_labels {params.mut_labels} --stat fixation
        """)

rule kl_divergence_fixation_sample:
    input:
        f"{output_dir}/full_data.csv"
    output:
        f"{output_dir}/graphs/sampling/kl_divergence_fixation_{{sample}}.svg",
        f"{output_dir}/summary_stats/sampling/kl_divergence_fixation_{{sample}}.csv"
    conda:
        config["conda_env"]
    params:
        muts = get_sim_muts(),
        mut_labels = [mutation_names[mut] for mut in get_sim_muts()]
    group:
        "stats"
    shell:
        ("""
        python scripts/create_divergence_plots_sampling.py --input {input} --output {output_dir} --type kl --muts {params.muts} --mut_labels {params.mut_labels} --stat fixation --sample_size {wildcards.sample}
        """)
    
rule kl_divergence_sfs:
    input:
        f"{output_dir}/full_data.csv"
    output:
        f"{output_dir}/graphs/kl_divergence_sfs.svg",
        f"{output_dir}/summary_stats/kl_divergence_sfs.csv"
    conda:
        config["conda_env"]
    params:
        muts = get_sim_muts(),
        mut_labels = [mutation_names[mut] for mut in get_sim_muts()]
    group:
        "stats"
    shell:
        ("""
        python scripts/create_divergence_plots.py --input {input} --output {output_dir} --type kl --muts {params.muts} --mut_labels {params.mut_labels} --stat sfs
        """)
    
rule kl_divergence_sfs_sample:
    input:
        f"{output_dir}/full_data.csv"
    output:
        f"{output_dir}/graphs/sampling/kl_divergence_sfs_{{sample}}.svg",
        f"{output_dir}/summary_stats/sampling/kl_divergence_sfs_{{sample}}.csv"
    conda:
        config["conda_env"]
    params:
        muts = get_sim_muts(),
        mut_labels = [mutation_names[mut] for mut in get_sim_muts()]
    group:
        "stats"
    shell:
        ("""
        python scripts/create_divergence_plots_sampling.py --input {input} --output {output_dir} --type kl --muts {params.muts} --mut_labels {params.mut_labels} --stat sfs --sample_size {wildcards.sample}
        """)
    
# rule kl_divergence_ld:
#     input:
#         f"{output_dir}/full_data.csv"
#     output:
#         f"{output_dir}/graphs/kl_divergence_ld.svg",
#         f"{output_dir}/summary_stats/kl_divergence_ld.csv"
#     conda:
#         config["conda_env"]
#     group:
#         "stats"
#     shell:
#         ("""
#         python scripts/create_divergence_plots.py --input {input} --output {output_dir} --type kl --stat ld
#         """)

rule average_rmse_ld:
    input:
        f"{output_dir}/full_data.csv"
    output:
        f"{output_dir}/graphs/average_rmse_ld.svg",
        f"{output_dir}/summary_stats/average_rmse_ld.csv"
    conda:
        config["conda_env"]
    group:
        "stats"
    shell:
        ("""
        python scripts/create_divergence_plots.py --input {input} --output {output_dir} --type average_rmse --stat ld
        """)

rule average_rmse_ld_sample:
    input:
        f"{output_dir}/full_data.csv"
    output:
        f"{output_dir}/graphs/sampling/average_rmse_ld_{{sample}}.svg",
        f"{output_dir}/summary_stats/sampling/average_rmse_ld_{{sample}}.csv"
    conda:
        config["conda_env"]
    group:
        "stats"
    shell:
        ("""
        python scripts/create_divergence_plots_sampling.py --input {input} --output {output_dir} --type average_rmse --stat ld --sample_size {wildcards.sample}
        """)

rule mean_percent_error_fixation:
    input:
        f"{output_dir}/full_data.csv"
    output:
        f"{output_dir}/graphs/mean_percent_error_fixation.svg",
        f"{output_dir}/summary_stats/mean_percent_error_fixation.csv"
    conda:
        config["conda_env"]
    params:
        muts = get_sim_muts(),
        mut_labels = [mutation_names[mut] for mut in get_sim_muts()]
    group:
        "stats"
    shell:
        ("""
        python scripts/create_divergence_plots.py --input {input} --output {output_dir} --type mean_percent_error --muts {params.muts} --mut_labels {params.mut_labels} --stat fixation
        """)
    
rule mean_percent_error_fixation_sample:
    input:
        f"{output_dir}/full_data.csv"
    output:
        f"{output_dir}/graphs/sampling/mean_percent_error_fixation_{{sample}}.svg",
        f"{output_dir}/summary_stats/sampling/mean_percent_error_fixation_{{sample}}.csv"
    conda:
        config["conda_env"]
    params:
        muts = get_sim_muts(),
        mut_labels = [mutation_names[mut] for mut in get_sim_muts()]
    group:
        "stats"
    shell:
        ("""
        python scripts/create_divergence_plots_sampling.py --input {input} --output {output_dir} --type mean_percent_error --muts {params.muts} --mut_labels {params.mut_labels} --stat fixation --sample {wildcards.sample}
        """)
    
rule mean_percent_error_sfs:
    input:
        f"{output_dir}/full_data.csv"
    output:
        f"{output_dir}/graphs/mean_percent_error_sfs.svg",
        f"{output_dir}/summary_stats/mean_percent_error_sfs.csv"
    conda:
        config["conda_env"]
    params:
        muts = get_sim_muts(),
        mut_labels = [mutation_names[mut] for mut in get_sim_muts()]
    group:
        "stats"
    shell:
        ("""
        python scripts/create_divergence_plots.py --input {input} --output {output_dir} --type mean_percent_error --muts {params.muts} --mut_labels {params.mut_labels} --stat sfs
        """)

rule mean_percent_error_sfs_sample:
    input:
        f"{output_dir}/full_data.csv"
    output:
        f"{output_dir}/graphs/sampling/mean_percent_error_sfs_{{sample}}.svg",
        f"{output_dir}/summary_stats/sampling/mean_percent_error_sfs_{{sample}}.csv"
    conda:
        config["conda_env"]
    params:
        muts = get_sim_muts(),
        mut_labels = [mutation_names[mut] for mut in get_sim_muts()]
    group:
        "stats"
    shell:
        ("""
        python scripts/create_divergence_plots_sampling.py --input {input} --output {output_dir} --type mean_percent_error --muts {params.muts} --mut_labels {params.mut_labels} --stat sfs --sample {wildcards.sample}
        """)

rule mean_percent_error_ld:
    input:
        f"{output_dir}/full_data.csv"
    output:
        f"{output_dir}/graphs/mean_percent_error_ld.svg",
        f"{output_dir}/summary_stats/mean_percent_error_ld.csv"
    conda:
        config["conda_env"]
    group:
        "stats"
    shell:
        ("""
        python scripts/create_divergence_plots.py --input {input} --output {output_dir} --type mean_percent_error --stat ld
        """)

rule mean_percent_error_ld_sample:
    input:
        f"{output_dir}/full_data.csv"
    output:
        f"{output_dir}/graphs/sampling/mean_percent_error_ld_{{sample}}.svg",
        f"{output_dir}/summary_stats/sampling/mean_percent_error_ld_{{sample}}.csv"
    conda:
        config["conda_env"]
    group:
        "stats"
    shell:
        ("""
        python scripts/create_divergence_plots_sampling.py --input {input} --output {output_dir} --type mean_percent_error --stat ld --sample {wildcards.sample}
        """)

rule mean_percent_error_fixationprobs:
    input:
        f"{output_dir}/full_data.csv"
    output:
        f"{output_dir}/graphs/mean_percent_error_fixationprobs.svg",
        f"{output_dir}/summary_stats/mean_percent_error_fixationprobs.csv"
    conda:
        config["conda_env"]
    params:
        muts = get_sim_muts(),
        mut_labels = [mutation_names[mut] for mut in get_sim_muts()]
    group:
        "stats"
    shell:
        ("""
        python scripts/create_divergence_plots.py --input {input} --output {output_dir} --type mean_percent_error --muts {params.muts} --mut_labels {params.mut_labels} --stat fixationprobs
        """)
    
rule mean_percent_error_fixationprobs_sample:
    input:
        f"{output_dir}/full_data.csv"
    output:
        f"{output_dir}/graphs/sampling/mean_percent_error_fixationprobs_{{sample}}.svg",
        f"{output_dir}/summary_stats/sampling/mean_percent_error_fixationprobs_{{sample}}.csv"
    conda:
        config["conda_env"]
    params:
        muts = get_sim_muts(),
        mut_labels = [mutation_names[mut] for mut in get_sim_muts()]
    group:
        "stats"
    shell:
        ("""
        python scripts/create_divergence_plots_sampling.py --input {input} --output {output_dir} --type mean_percent_error --muts {params.muts} --mut_labels {params.mut_labels} --stat fixationprobs --sample {wildcards.sample}
        """)

rule median_percent_error_fixation:
    input:
        f"{output_dir}/full_data.csv"
    output:
        f"{output_dir}/graphs/median_percent_error_fixation.svg",
        f"{output_dir}/summary_stats/median_percent_error_fixation.csv"
    conda:
        config["conda_env"]
    params:
        muts = get_sim_muts(),
        mut_labels = [mutation_names[mut] for mut in get_sim_muts()]
    group:
        "stats"
    shell:
        ("""
        python scripts/create_divergence_plots.py --input {input} --output {output_dir} --type median_percent_error --muts {params.muts} --mut_labels {params.mut_labels} --stat fixation
        """)

rule median_percent_error_sfs:
    input:
        f"{output_dir}/full_data.csv"
    output:
        f"{output_dir}/graphs/median_percent_error_sfs.svg",
        f"{output_dir}/summary_stats/median_percent_error_sfs.csv"
    conda:
        config["conda_env"]
    params:
        muts = get_sim_muts(),
        mut_labels = [mutation_names[mut] for mut in get_sim_muts()]
    group:
        "stats"
    shell:
        ("""
        python scripts/create_divergence_plots.py --input {input} --output {output_dir} --type median_percent_error --muts {params.muts} --mut_labels {params.mut_labels} --stat sfs
        """)
    
rule median_percent_error_ld:
    input:
        f"{output_dir}/full_data.csv"
    output:
        f"{output_dir}/graphs/median_percent_error_ld.svg",
        f"{output_dir}/summary_stats/median_percent_error_ld.csv"
    conda:
        config["conda_env"]
    group:
        "stats"
    shell:
        ("""
        python scripts/create_divergence_plots.py --input {input} --output {output_dir} --type median_percent_error --stat ld
        """)

rule create_fulldata:
    input: 
        [expand(f"{output_dir}/batch_tmp_fulldata/batch_{{Q}}_{{batch}}.csv", 
        Q=i, batch=range(get_num_batches(i))) for i in get_qs()]
    output:
        f"{output_dir}/full_data.csv"
    conda:
        config["conda_env"]
    shell:
        "python scripts/combine_fulldata_batches.py --input_files {input} --output_file {output}"
    
rule create_fulldata_batches:
    input:
        get_batch_files
    output:
        f"{output_dir}/batch_tmp_fulldata/batch_{{Q}}_{{batch}}.csv"
    conda:
        config["conda_env"]
    params:
        muts=get_sim_muts(),
        bin_widths=get_fixation_binwidth()
    shell:
        ("""
        mkdir -p {config[output_dir]}/batch_tmp_fulldata
        python scripts/create_fulldata_batches.py --muts {params.muts} --muts_fix_bin_width {params.bin_widths} --output_file {output} \
 --Q {wildcards.Q} --chr_len {config[chr_len]} --input_files {input}
        """)

rule clean_logs:
    shell:
        "rm -rf log/*"
