
initialize() {
	
	//defineConstant('log_dir', 'Directory where simulation outcomes are stored');
	//defineConstant('job_no', 'Replicate');
	//defineConstant('Q', 'Scaling Factor');
	
	// define base constant
	defineConstant("BASE_POP_SIZE", 100000);
	defineConstant("BASE_MUT_RATE", 1.2e-8);
	defineConstant("BASE_RECOMB_RATE", 1.2e-8);
	
	// define scaled constants
	defineConstant('POP_SIZE', asInteger(BASE_POP_SIZE/Q));
	defineConstant('BURN_IN_TIME', asInteger(POP_SIZE*10));
	defineConstant('RUN_TIME', asInteger(BURN_IN_TIME*10));
	
	// define storage directory
	defineConstant("STORE_DIR", log_dir + "Q" + Q);
	
	defineConstant('L', 25000000);
	initializeMutationRate(BASE_MUT_RATE * Q);
	initializeMutationType("m1", 0.5, "f", 0.0);
	initializeMutationType("m2", 1.0, "f", 0.05 * Q);  // introduced mutation
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, L-1);
	initializeRecombinationRate(BASE_RECOMB_RATE * Q);
}

1 early() {
	// save this run's identifier, used to save and restore
	defineConstant("simID", getSeed());
	
	createDirectory(STORE_DIR);
	
	sim.addSubpop("p1", POP_SIZE);
	community.registerLateEvent(NULL, '{introduce_mutation();}', BURN_IN_TIME, BURN_IN_TIME);
	community.registerLateEvent(NULL, '{check_fixation();}', BURN_IN_TIME, BURN_IN_TIME + RUN_TIME);
	community.registerLateEvent(NULL, '{end_with_exception();}', BURN_IN_TIME + RUN_TIME+1, BURN_IN_TIME+RUN_TIME+1);
	
	writeFile(STORE_DIR + "/fixation_" + asString(job_no) + ".csv", 'm2', append=F);
}


function (void)introduce_mutation(void) {
	// save the state of the simulation
	sim.outputFull(tempdir() + "slim_" + simID + ".txt");
	
	// introduce the sweep mutation
	target = sample(p1.genomes, 1);
	target.addNewDrawnMutation(m2, asInteger(L/2));

}


function (void)check_fixation(void){
	if (sim.countOfMutationsOfType(m2) == 0)
	{
		fixed = (sum(sim.substitutions.mutationType == m2) == 1);
		
		if (fixed)
		{
			writeFile(STORE_DIR + '/fixation_' + asString(job_no) + '.csv', asString(sim.cycle - BURN_IN_TIME), append=T);
			p1.outputVCFSample(100, filePath = STORE_DIR + "/sample_" + asString(job_no) + ".vcf");
			sim.simulationFinished();
		}
		else
		{
			restart_sim();
		}
	}

}

function (void)restart_sim(void){
	cat(simID + ": LOST - RESTARTING\n");
	
	// go back to after the burn-in
	sim.readFromPopulationFile(tempdir() + "slim_" + simID + ".txt");
	
	// start a newly seeded run
	setSeed(rdunif(1, 0, asInteger(2^62) - 1));
	
	// re-introduce the sweep mutation
	target = sample(p1.genomes, 1);
	target.addNewDrawnMutation(m2, asInteger(L/2));
}

function (void)end_with_exception(void){
	cat(simID + ": ERROR: Did not reach fixation or lose mutation");
	sim.simulationFinished();
}
