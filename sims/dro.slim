initialize() {
	
	//command-line constants:
	//defineConstant('log_dir', 'Directory where simulation outcomes are stored');
	//defineConstant('job_no', 'Replicate');
	//defineConstant('Q', 'Scaling Factor');
	
	// the number of mutations in the sim	
	defineConstant("NUM_MUTS", 3);
	
	// define base constants
	defineConstant('BASE_POP_SIZE', 1720600);
	defineConstant("L", 9999);
	
	// initialize scaled parameters	      
	initializeRecombinationRate(1.9809378853406417e-08 * Q);
	defineConstant("POP_SIZE", asInteger(POP_SIZE / Q));
	defineConstant("BURN_IN_TIME", 10*POP_SIZE);
	defineConstant("RUN_TIME", 4*POP_SIZE+BURN_IN_TIME);
	
	// define storage directory
	defineConstant("STORE_DIR", log_dir + "Q" + Q);
	
	// create matrices to store mutation and fixation counts
	defineGlobal("MUT_COUNT_VEC", rep(0,num_muts));
	defineGlobal("FIX_COUNT_VEC", rep(0,num_muts));
	
	
	initializeMutationType(1, 0.5, "f", Q * 0);
	initializeMutationType(2, 0.5, "s", "return -1 *rlnorm(1, 9.678571428571428e-07 + log(Q), 3.36);");
	initializeMutationType(3, 0.5, "f", Q * 7.1249999999999995e-06);
	initializeGenomicElementType(1, c(1, 2, 3), c(1-(0.7086428571428571 + 0.005642857142857144), 0.7086428571428571, 0.005642857142857144));
	initializeGenomicElement(g1, 0, L);
	initializeMutationRate(Q*5.49-09);

}

// modify mutation callback to count all mutations
function (logical$)mut_callback(object$ mutation) {
	mut_id = mutation.mutationType.id;
	MUT_COUNT_VEC[mut_id -1] = MUT_COUNT_VEC[mut_id-1] + 1;
	return T;
}

1 early() {
	// create a subpopulation
	sim.addSubpop("p1", POP_SIZE);
	// create the storage directory
	createDirectory(STORE_DIR);
	/* 
		In SLiM >= 4.2, dynamic scheduling of events as is done with the registerLateEvent() and
		registerEarlyEvent() here can be simplified by using global constants in the tick schedule 
	*/
	community.registerLateEvent(NULL, '{end();}', RUN_TIME, RUN_TIME);
	community.registerEarlyEvent(NULL, '{create_metrics();}', BURN_IN_TIME, BURN_IN_TIME);
	community.registerEarlyEvent(NULL, '{print_gen();}', 2, RUN_TIME);
	sim.registerMutationCallback(NULL, '{return mut_callback(mut);}', NULL, NULL, BURN_IN_TIME, RUN_TIME);
	defineGlobal('start_clock', clock('mono'));
}

function (void)create_metrics(void){
	
	// kcreate the headers for the fractions of mutations fixed file
	headers = paste('m' + sim.mutationTypes.id, sep=",");
	writeFile(STORE_DIR + "/fixation_prob_" + asString(job_no) + ".csv", headers, append=F);
	// create the headers for the fixation time file	
	to_write = ("mutation_id" + "," + "origin_gen" + "," + "fix_gen");
	writeFile(STORE_DIR + "/fixation_" + asString(job_no) + ".csv", to_write, append=F);


}

function (void)end(void){
	
	for (mut in sim.substitutions){
		if (mut.originTick > BURN_IN_TIME){
			col = mut.mutationType.id - 1;
			FIX_COUNT_VEC[col] = FIX_COUNT_VEC[col] + 1;
			to_write = ("m" + mut.mutationType.id + "," + mut.originTick + "," +  mut.fixationTick);
			writeFile(STORE_DIR + "/fixation_" + asString(job_no) + ".csv", to_write, append=T);
		}
	}
	
	fix_prob = FIX_COUNT_VEC/MUT_COUNT_VEC;
	to_write = paste(fix_prob, sep=",");
	writeFile(STORE_DIR + "/fixation_prob_" + asString(job_no) + ".csv", to_write, append=T);
	p1.outputVCFSample(100, filePath = STORE_DIR + "/sample_" + asString(job_no) + ".vcf");
	
	sim.simulationFinished();
}

function (void)print_gen(void){
	if (sim.cycle % 10 == 0){
		pos = asInteger((sim.cycle/RUN_TIME)*20);
		prog_bar = paste0('[', rep('â–ˆ', pos), rep('-', 20-pos), "]");
		print(prog_bar);
		print(paste0('Generation ', sim.cycle, ' / ', RUN_TIME));
		elapsed_time = asInteger(clock('mono') - start_clock);
		print(paste0('Elapsed Time:', formatTime(elapsed_time)));
		eta = (RUN_TIME - sim.cycle) * (elapsed_time / sim.cycle);
		print(paste0('ETA:', formatTime(eta)));
	
	}

}

function (string$)formatTime(numeric$ elapsed_seconds){
	
	total_mins = asInteger(elapsed_seconds / 60);
	secs = format("%.2i", asInteger(elapsed_seconds % 60));
	hours = format("%.2i", asInteger(total_mins / 60));
	mins = format("%.2i", asInteger(total_mins % 60));
	return(paste0(hours, ':', mins, ':', secs));

}
